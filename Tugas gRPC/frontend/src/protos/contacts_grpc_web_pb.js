/**
 * @fileoverview gRPC-Web generated client stub for contacts
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v4.22.2
// source: contacts.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.contacts = require('./contacts_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.contacts.ContactServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.contacts.ContactServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.contacts.Empty,
 *   !proto.contacts.ContactList>}
 */
const methodDescriptor_ContactService_getAll = new grpc.web.MethodDescriptor(
  '/contacts.ContactService/getAll',
  grpc.web.MethodType.UNARY,
  proto.contacts.Empty,
  proto.contacts.ContactList,
  /**
   * @param {!proto.contacts.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.contacts.ContactList.deserializeBinary
);


/**
 * @param {!proto.contacts.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.contacts.ContactList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.contacts.ContactList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.contacts.ContactServiceClient.prototype.getAll =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/contacts.ContactService/getAll',
      request,
      metadata || {},
      methodDescriptor_ContactService_getAll,
      callback);
};


/**
 * @param {!proto.contacts.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.contacts.ContactList>}
 *     Promise that resolves to the response
 */
proto.contacts.ContactServicePromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/contacts.ContactService/getAll',
      request,
      metadata || {},
      methodDescriptor_ContactService_getAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.contacts.Contacts,
 *   !proto.contacts.Contacts>}
 */
const methodDescriptor_ContactService_AddContact = new grpc.web.MethodDescriptor(
  '/contacts.ContactService/AddContact',
  grpc.web.MethodType.UNARY,
  proto.contacts.Contacts,
  proto.contacts.Contacts,
  /**
   * @param {!proto.contacts.Contacts} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.contacts.Contacts.deserializeBinary
);


/**
 * @param {!proto.contacts.Contacts} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.contacts.Contacts)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.contacts.Contacts>|undefined}
 *     The XHR Node Readable Stream
 */
proto.contacts.ContactServiceClient.prototype.addContact =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/contacts.ContactService/AddContact',
      request,
      metadata || {},
      methodDescriptor_ContactService_AddContact,
      callback);
};


/**
 * @param {!proto.contacts.Contacts} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.contacts.Contacts>}
 *     Promise that resolves to the response
 */
proto.contacts.ContactServicePromiseClient.prototype.addContact =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/contacts.ContactService/AddContact',
      request,
      metadata || {},
      methodDescriptor_ContactService_AddContact);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.contacts.Contact_id,
 *   !proto.contacts.Empty>}
 */
const methodDescriptor_ContactService_deleteContact = new grpc.web.MethodDescriptor(
  '/contacts.ContactService/deleteContact',
  grpc.web.MethodType.UNARY,
  proto.contacts.Contact_id,
  proto.contacts.Empty,
  /**
   * @param {!proto.contacts.Contact_id} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.contacts.Empty.deserializeBinary
);


/**
 * @param {!proto.contacts.Contact_id} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.contacts.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.contacts.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.contacts.ContactServiceClient.prototype.deleteContact =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/contacts.ContactService/deleteContact',
      request,
      metadata || {},
      methodDescriptor_ContactService_deleteContact,
      callback);
};


/**
 * @param {!proto.contacts.Contact_id} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.contacts.Empty>}
 *     Promise that resolves to the response
 */
proto.contacts.ContactServicePromiseClient.prototype.deleteContact =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/contacts.ContactService/deleteContact',
      request,
      metadata || {},
      methodDescriptor_ContactService_deleteContact);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.contacts.Contact_id,
 *   !proto.contacts.Contacts>}
 */
const methodDescriptor_ContactService_updateContact = new grpc.web.MethodDescriptor(
  '/contacts.ContactService/updateContact',
  grpc.web.MethodType.UNARY,
  proto.contacts.Contact_id,
  proto.contacts.Contacts,
  /**
   * @param {!proto.contacts.Contact_id} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.contacts.Contacts.deserializeBinary
);


/**
 * @param {!proto.contacts.Contact_id} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.contacts.Contacts)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.contacts.Contacts>|undefined}
 *     The XHR Node Readable Stream
 */
proto.contacts.ContactServiceClient.prototype.updateContact =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/contacts.ContactService/updateContact',
      request,
      metadata || {},
      methodDescriptor_ContactService_updateContact,
      callback);
};


/**
 * @param {!proto.contacts.Contact_id} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.contacts.Contacts>}
 *     Promise that resolves to the response
 */
proto.contacts.ContactServicePromiseClient.prototype.updateContact =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/contacts.ContactService/updateContact',
      request,
      metadata || {},
      methodDescriptor_ContactService_updateContact);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.contacts.Contact_id,
 *   !proto.contacts.Contacts>}
 */
const methodDescriptor_ContactService_getContact = new grpc.web.MethodDescriptor(
  '/contacts.ContactService/getContact',
  grpc.web.MethodType.UNARY,
  proto.contacts.Contact_id,
  proto.contacts.Contacts,
  /**
   * @param {!proto.contacts.Contact_id} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.contacts.Contacts.deserializeBinary
);


/**
 * @param {!proto.contacts.Contact_id} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.contacts.Contacts)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.contacts.Contacts>|undefined}
 *     The XHR Node Readable Stream
 */
proto.contacts.ContactServiceClient.prototype.getContact =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/contacts.ContactService/getContact',
      request,
      metadata || {},
      methodDescriptor_ContactService_getContact,
      callback);
};


/**
 * @param {!proto.contacts.Contact_id} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.contacts.Contacts>}
 *     Promise that resolves to the response
 */
proto.contacts.ContactServicePromiseClient.prototype.getContact =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/contacts.ContactService/getContact',
      request,
      metadata || {},
      methodDescriptor_ContactService_getContact);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.contacts.Empty,
 *   !proto.contacts.Empty>}
 */
const methodDescriptor_ContactService_createDatabase = new grpc.web.MethodDescriptor(
  '/contacts.ContactService/createDatabase',
  grpc.web.MethodType.UNARY,
  proto.contacts.Empty,
  proto.contacts.Empty,
  /**
   * @param {!proto.contacts.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.contacts.Empty.deserializeBinary
);


/**
 * @param {!proto.contacts.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.contacts.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.contacts.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.contacts.ContactServiceClient.prototype.createDatabase =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/contacts.ContactService/createDatabase',
      request,
      metadata || {},
      methodDescriptor_ContactService_createDatabase,
      callback);
};


/**
 * @param {!proto.contacts.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.contacts.Empty>}
 *     Promise that resolves to the response
 */
proto.contacts.ContactServicePromiseClient.prototype.createDatabase =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/contacts.ContactService/createDatabase',
      request,
      metadata || {},
      methodDescriptor_ContactService_createDatabase);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.contacts.Empty,
 *   !proto.contacts.Empty>}
 */
const methodDescriptor_ContactService_deleteDatabase = new grpc.web.MethodDescriptor(
  '/contacts.ContactService/deleteDatabase',
  grpc.web.MethodType.UNARY,
  proto.contacts.Empty,
  proto.contacts.Empty,
  /**
   * @param {!proto.contacts.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.contacts.Empty.deserializeBinary
);


/**
 * @param {!proto.contacts.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.contacts.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.contacts.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.contacts.ContactServiceClient.prototype.deleteDatabase =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/contacts.ContactService/deleteDatabase',
      request,
      metadata || {},
      methodDescriptor_ContactService_deleteDatabase,
      callback);
};


/**
 * @param {!proto.contacts.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.contacts.Empty>}
 *     Promise that resolves to the response
 */
proto.contacts.ContactServicePromiseClient.prototype.deleteDatabase =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/contacts.ContactService/deleteDatabase',
      request,
      metadata || {},
      methodDescriptor_ContactService_deleteDatabase);
};


module.exports = proto.contacts;

